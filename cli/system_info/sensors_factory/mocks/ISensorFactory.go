// Code generated by mockery v2.9.3. DO NOT EDIT.

package mocks

import (
	cobra "github.com/spf13/cobra"
	mock "github.com/stretchr/testify/mock"

	sensors "github.wdf.sap.corp/I554249/sensor/system_info/sensors"

	sensorsfactory "github.wdf.sap.corp/I554249/sensor/system_info/sensors_factory"
)

// ISensorFactory is an autogenerated mock type for the ISensorFactory type
type ISensorFactory struct {
	mock.Mock
}

// CreateSensor provides a mock function with given fields: _a0, _a1
func (_m *ISensorFactory) CreateSensor(_a0 sensorsfactory.ConfigSensor, _a1 string) (sensors.SystemSensor, error) {
	ret := _m.Called(_a0, _a1)

	var r0 sensors.SystemSensor
	if rf, ok := ret.Get(0).(func(sensorsfactory.ConfigSensor, string) sensors.SystemSensor); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sensors.SystemSensor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sensorsfactory.ConfigSensor, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SensorFactory provides a mock function with given fields: _a0
func (_m *ISensorFactory) SensorFactory(_a0 *cobra.Command) ([]sensors.SystemSensor, error) {
	ret := _m.Called(_a0)

	var r0 []sensors.SystemSensor
	if rf, ok := ret.Get(0).(func(*cobra.Command) []sensors.SystemSensor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sensors.SystemSensor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cobra.Command) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
