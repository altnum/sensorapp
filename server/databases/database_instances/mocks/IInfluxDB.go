// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	influxdb2 "github.com/influxdata/influxdb-client-go/v2"
	database_instances "github.wdf.sap.corp/I554249/sensor/databases/database_instances"

	mock "github.com/stretchr/testify/mock"

	models "github.wdf.sap.corp/I554249/sensor/models"
)

// IInfluxDB is an autogenerated mock type for the IInfluxDB type
type IInfluxDB struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IInfluxDB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMeasurement provides a mock function with given fields: _a0
func (_m *IInfluxDB) CreateMeasurement(_a0 map[string]string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMeasurements provides a mock function with given fields: _a0
func (_m *IInfluxDB) GetAllMeasurements(_a0 context.Context) ([]*models.Measurements, error) {
	ret := _m.Called(_a0)

	var r0 []*models.Measurements
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Measurements); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Measurements)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDB provides a mock function with given fields:
func (_m *IInfluxDB) GetDB() influxdb2.Client {
	ret := _m.Called()

	var r0 influxdb2.Client
	if rf, ok := ret.Get(0).(func() influxdb2.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(influxdb2.Client)
		}
	}

	return r0
}

// GetInfluxInstance provides a mock function with given fields:
func (_m *IInfluxDB) GetInfluxInstance() database_instances.IInfluxDB {
	ret := _m.Called()

	var r0 database_instances.IInfluxDB
	if rf, ok := ret.Get(0).(func() database_instances.IInfluxDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database_instances.IInfluxDB)
		}
	}

	return r0
}

// GetMeasurementById provides a mock function with given fields: _a0, _a1
func (_m *IInfluxDB) GetMeasurementById(_a0 context.Context, _a1 string) ([]*models.Measurements, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.Measurements
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Measurements); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Measurements)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPearsonsCoefficient provides a mock function with given fields: _a0, _a1
func (_m *IInfluxDB) GetPearsonsCoefficient(_a0 context.Context, _a1 map[string]string) (float64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) float64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostgreInstance provides a mock function with given fields:
func (_m *IInfluxDB) GetPostgreInstance() database_instances.IPostgreDB {
	ret := _m.Called()

	var r0 database_instances.IPostgreDB
	if rf, ok := ret.Get(0).(func() database_instances.IPostgreDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database_instances.IPostgreDB)
		}
	}

	return r0
}

// GetSensorAverage provides a mock function with given fields: _a0, _a1
func (_m *IInfluxDB) GetSensorAverage(_a0 context.Context, _a1 map[string]string) (models.AverageMeasurement, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.AverageMeasurement
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) models.AverageMeasurement); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.AverageMeasurement)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: _a0
func (_m *IInfluxDB) Open(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
